// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// findInterval2
IntegerVector findInterval2(NumericVector x, NumericVector breaks);
RcppExport SEXP _xQTLstats_findInterval2(SEXP xSEXP, SEXP breaksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type breaks(breaksSEXP);
    rcpp_result_gen = Rcpp::wrap(findInterval2(x, breaks));
    return rcpp_result_gen;
END_RCPP
}
// smoothQTL
NumericVector smoothQTL(arma::vec G, arma::vec Map, CharacterVector Kern, NumericVector W);
RcppExport SEXP _xQTLstats_smoothQTL(SEXP GSEXP, SEXP MapSEXP, SEXP KernSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Map(MapSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type Kern(KernSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(smoothQTL(G, Map, Kern, W));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_xQTLstats_findInterval2", (DL_FUNC) &_xQTLstats_findInterval2, 2},
    {"_xQTLstats_smoothQTL", (DL_FUNC) &_xQTLstats_smoothQTL, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_xQTLstats(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
